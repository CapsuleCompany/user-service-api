# Generated by Django 5.1.4 on 2025-01-25 15:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, default='US', max_length=2)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dark_mode', models.BooleanField(default=False, help_text='Enable or disable dark mode for the user.')),
                ('language', models.CharField(default='en', help_text="Preferred language of the user (e.g., 'en', 'es').", max_length=10)),
                ('email_notifications', models.BooleanField(default=True, help_text='Enable or disable email notifications.')),
                ('sms_notifications', models.BooleanField(default=False, help_text='Enable or disable SMS notifications.')),
                ('push_notifications', models.BooleanField(default=True, help_text='Enable or disable push notifications.')),
                ('payment_preference', models.CharField(choices=[('platform', 'Platform Payout'), ('stripe', 'Stripe Payout')], default='platform', help_text="Preferred payout method ('platform' or 'stripe').", max_length=50)),
                ('default_payment_method', models.CharField(blank=True, help_text="User's default payment method (e.g., 'credit_card', 'paypal').", max_length=50)),
                ('payment_reminders', models.BooleanField(default=True, help_text='Enable or disable payment reminders.')),
                ('is_profile_public', models.BooleanField(default=False, help_text="Indicates if the user's profile is public.")),
                ('allow_marketing_emails', models.BooleanField(default=False, help_text='Allow or disallow marketing emails.')),
                ('stripe_account_id', models.CharField(blank=True, help_text='The Stripe account ID associated with the user for payouts.', max_length=255)),
                ('bank_account_number', models.CharField(blank=True, help_text="The user's bank account number for Stripe payouts.", max_length=255)),
                ('bank_routing_number', models.CharField(blank=True, help_text="The routing number of the user's bank.", max_length=255)),
                ('bank_account_holder_name', models.CharField(blank=True, help_text='Name of the bank account holder.', max_length=255)),
                ('bank_account_holder_type', models.CharField(blank=True, choices=[('individual', 'Individual'), ('company', 'Company')], help_text='Type of account holder (individual or company).', max_length=50)),
                ('payout_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', help_text='Preferred payout frequency.', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='The user associated with these settings.', on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
